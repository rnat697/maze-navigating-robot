/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, HTML, CSS, JS
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

typedef struct {
    int pairRow;
    int pairCol;
} Pair;

typedef struct {
    Pair pair;
} Array[100];

enum direction{NORTH, SOUTH, WEST, EAST};

 Array finalArray;
    
    // Pair coordinate;
    // coordinate.pairRow = 9;
    // coordinate.pairCol = 0;
    // finalArray[2]= coordinate;
    
    int cols[20] = {0,1,1,1,2, 3, 3, 4, 5, 5, 5, 5};
    int rows[20] = {0,0,1,2,4, 4, 3, 1, 1, 2, 3, 4};
    
    int size = 12;
    
    //column == x, row == y
    //for loop
    for (int i=0;i<size;i++) {
        finalArray[i].pair.pairRow =cols[i];
        finalArray[i].pair.pairCol = rows[i];
    }
    
enum direction calculateDirection(int currentCol, int currentRow, int nextCol, int nextRow) {
    
    
    if ((nextCol == currentCol + 1) && (nextRow == currentRow) {
        //must be going EAST
        return EAST;
    } else if ((nextCol == currentCol - 1) && (nextRow == currentRow) {
        //must be going WEST
        return WEST;
    } else if ((nextCol == currentCol) && (nextRow == currentRow + 1) {
        //must be going NORTH
        return NORTH;
    } else if ((nextCol == currentCol) && (nextRow == currentRow - 1) {
        //must be going SOUTH
        return SOUTH;
    }
    
    return 0;
}

int main()
{
    //declare arraypointer
    int arrayPointer = 0;
    
    

    //calculate initial direction
    enum direction dir = calculateDirection(int currentCol, int currentRow, int nextCol, int nextRow);
    
    
    for(int i = 0;i<size;i++) {
        
        //current coordinate
        int currentCol = finalArray[arrayPointer].pair.pairCol;
        int currentRow = finalArray[arrayPointer].pair.pairRow;
    
        //next coordinate
        int nextCol = finalArray[arrayPointer + 1].pair.pairCol;
        int nextRow = finalArray[arrayPointer + 1].pair.pairRow;
        
        if (dir == NORTH) {
        //if col change postively turn right, if col change negatively turn left.
            if (nextCol > currentCol) {
                //record right turn
                
            } else if (nextCol < currentCol) {
                //record left turn
            }
            
        } else if (dir == SOUTH) {
            //if col change postively turn left, if col change negatively turn right.
            if (nextCol > currentCol) {
                //record left turn
                
            } else if (nextCol < currentCol) {
                //record right turn
            }
            
        } else if (dir == WEST) {
            //if row change negatively turn right, if row change positively turn left.
            if (nextRow > currentRow) {
                //record left turn
                
            } else if (nextRow < currentRow) {
                //record right turn
            }
        } else {
            //if row change negatively turn left, if row change positively turn right.
            if (nextRow > currentRow) {
                //record right turn
                
            } else if (nextRow < currentRow) {
                //record left turn
            }
        }
        
        //recalculate direction vector
        dir = calculateDirection(int currentCol, int currentRow, int nextCol, int nextRow);
        
        arrayPointer++;
        
    }
    

    
    return 0;
}
    
    
